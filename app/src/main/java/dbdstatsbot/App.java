/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dbdstatsbot;

import java.util.ArrayList;
import java.text.DecimalFormat;

import discord4j.common.util.Snowflake;
import discord4j.core.DiscordClient;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.channel.Channel;
import discord4j.core.object.entity.channel.GuildMessageChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.TextChannel;
import discord4j.core.object.presence.ClientPresence;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Color;
import discord4j.core.object.presence.ClientActivity;
import okhttp3.*;
import java.io.IOException;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.URL;

import discord4j.core.event.domain.guild.GuildCreateEvent;
import discord4j.core.object.component.SelectMenu;
import discord4j.core.object.entity.Guild;

public class App {
	private static final String STEAM_API_KEY = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
	private static final String STEAM_API_PLAYER_COUNT = "https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?appid=381210";
	static String token = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
	static DiscordClient client = DiscordClient.create(token);
	static GatewayDiscordClient gateway = client.login().block();
	static int appId = 381210;
	static boolean isAPIUp = false;
	static String GensCompleted = null, HealingCompleted = null, SuccessfulSkillChecks = null,
									Escapes = null, BloodPoints = null,
									MaxPrestige = null, Vaults = null, HexsCleansed = null, EscapesHatch = null,
									SurvivorsKilled = null, SurvivorsSacrificed = null, ObsessionsSacrificed = null, HatchesClosed = null;
							static boolean GensBoolean = false, HealingCompletedBoolean = false,
									SuccessfulSkillChecksBoolean = false, EscapesBoolean = false,
									BloodPointsBoolean = false,
									MaxPrestigeBoolean = false, VaultsBoolean = false, HexsCleansedBoolean = false,
									EscapesHatchBoolean = false, SurvivorsKilledBoolean = false, SurvivorsSacrificedBoolean = false,
									HatchesClosedBoolean = false, ObsessionsSacrificedBoolean = false;
									static SteamStatus steamStatus = new SteamStatus();

	public static void main(String[] args) 
	{
		//Import SteamStatus.java
		
		Stats();

	}

	

	private static void createDiscordChannel()
	{
		gateway.getGuilds()
            .doOnNext(guild -> 
			{
                System.out.println("Connected to guild with ID: " + guild.getId().asString());				
            })
            .blockLast();

			//Check if text channel dbdstats already exists if not create it
			
			for (Guild guild : gateway.getGuilds().toIterable()) 
			{
				// Check if the channel already exists
				TextChannel channel = (TextChannel) guild.getChannels().toStream()
					.filter(c -> c.getName().equals("dbdstats"))
					.findFirst().orElse(null);

					if (channel == null)
					{
						guild.createTextChannel("dbdstats").block();
					}
					else
					{
						System.out.println("Channel already exists");
					}
			}

			
		
			//Create discord text channel dbdstats when joining a new guild
			gateway.on(GuildCreateEvent.class).subscribe(event -> 
			{
				Guild guild1 = event.getGuild();
				TextChannel channel = null;
				for (Channel c : guild1.getChannels().toIterable()) 
				{
					if (c instanceof TextChannel)
					{
						channel = (TextChannel) c;
						if (channel.getName().equals("dbdstats"))
						{
							System.out.println("Channel already exists");
							
							return;
						}
						else
						{
							guild1.createTextChannel("dbdstats").block();
						}
					}
				
            	}
				
			});

			

	}
			
	private static void Stats() 
	{
		gateway.on(MessageCreateEvent.class).filter(event -> 
		{
			Message message = event.getMessage();
			TextChannel channel = (TextChannel) message.getChannel().block();
			return channel.getName().equals("dbdstats");
		})
		.subscribe(event -> 
		{
			Message message = event.getMessage();
			String steamProfileLink = "https://steamcommunity.com/id/";
			String steamProfileLink2 = "https://steamcommunity.com/profiles/";
			String survivorCommand = "!survivor " + steamProfileLink;
			String survivorCommand2 = "!survivor " + steamProfileLink2;
			String killerCommand = "!killer " + steamProfileLink;
			String killerCommand2 = "!killer " + steamProfileLink2;
			String helpCommand = "!help";
			String faq = "!faq";
			String platforms = "!platforms";
			String playerName = steamProfileLink.substring(steamProfileLink.lastIndexOf("/") + 1);
			System.out.println(playerName); // Outputs "Extra_Virgin"
			System.out.println(message.getContent());

			

			if(!steamStatus.isAPIUp() && !isAPIUp)
			{
				MessageChannel channel = message.getChannel().block();
				channel.createMessage("Steam API seems to be down, it should be back up within a few minutes").block();
				isAPIUp = true;
				return;
			}
						
			if (message.getContent().startsWith(survivorCommand)) 
			{
				survivorStats(message);
			}
			else if(message.getContent().startsWith(survivorCommand2))
			{
				survivorStatsNoURL(message);
			}
			else if(message.getContent().startsWith(killerCommand) || message.getContent().startsWith(killerCommand2))
			{
				killerStats(message);
			}
			else if(message.getContent().equals(helpCommand))
			{
				help(message);
			}
			else if(message.getContent().equals(faq))
			{
				faq(message);
			}
			else if(message.getContent().equals(platforms))
			{
				platforms(message);
			}			
		});

		OkHttpClient Ok = new OkHttpClient();
		Request request = new Request.Builder()
				.url(STEAM_API_PLAYER_COUNT)
				.build();
				try{

				Response response = Ok.newCall(request).execute();
				String json = response.body().string();


				Gson gson = new Gson();

					JsonObject jsonObject2 = gson.fromJson(json, JsonObject.class);

					JsonObject steamID = jsonObject2.get("response").getAsJsonObject();

					String success = steamID.get("player_count").getAsString();

					ClientActivity playing = ClientActivity.watching("Players Online: " + success);
					ClientPresence presence = ClientPresence.online(playing);
					gateway.updatePresence(presence).block();

					createDiscordChannel();

					gateway.onDisconnect().block();
				}
				catch(IOException e)
				{
					e.printStackTrace();
				}
	}


	private static void survivorStatsNoURL(Message message)
	{
		String steamId = message.getContent().substring(45);
				steamId = steamId.replace("/", "");
				System.out.println(steamId);
				MessageChannel channel = message.getChannel().block();

				try
				{

				OkHttpClient Ok = new OkHttpClient();

				String url = "https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/" +
								"?appid=" + appId +
								"&key=" + STEAM_API_KEY +
								"&steamid=" + steamId;

						Request request = new Request.Builder()
								.url(url)
								.build();

								Gson gson = new Gson();

						Response response = Ok.newCall(request).execute();
						String json = response.body().string();

						JsonObject jsonObject = gson.fromJson(json, JsonObject.class);
						System.out.println(jsonObject);
						boolean isOnlyEmptyObject = jsonObject.toString().equals("{}");
						System.out.println(isOnlyEmptyObject);

						if (isOnlyEmptyObject) 
						{
							channel.createMessage(
									"Please make sure your steam profile is public and allow for up to 10 minutes to try again")
									.block();
									
						} 
						else 
						{
							
							JsonArray achievementsArray = jsonObject.get("playerstats").getAsJsonObject().get("stats").getAsJsonArray();
							for (JsonElement element : achievementsArray) 
							{
								if (element == null) 
								{
									// Handle null elements
									continue;
								}

								JsonObject achievementObject = element.getAsJsonObject();
								JsonElement nameElement = achievementObject.get("name");
								JsonElement valueElement = achievementObject.get("value");

								if (nameElement == null || valueElement == null) {
									// Handle missing properties
									continue;
								}

								String name = nameElement.getAsString();
								double value = valueElement.getAsDouble();
								DecimalFormat decimalFormat = new DecimalFormat("#.##");
								decimalFormat.setRoundingMode(RoundingMode.DOWN);
								String formattedValue = decimalFormat.format(value);

								switch (name) 
								{
									case "DBD_GeneratorPct_float":
										GensCompleted = formattedValue;
										GensBoolean = true;
										break;

									case "DBD_HealPct_float":
										HealingCompleted = formattedValue;
										HealingCompletedBoolean = true;
										break;

									case "DBD_Escape":
										Escapes = formattedValue;
										EscapesBoolean = true;
										break;

									case "DBD_SkillCheckSuccess":
										SuccessfulSkillChecks = formattedValue;
										SuccessfulSkillChecksBoolean = true;
										break;

									case "DBD_BloodwebPoints":
										BloodPoints = formattedValue;
										BloodPointsBoolean = true;
										break;

									case "DBD_BloodwebMaxPrestigeLevel":
										MaxPrestige = formattedValue;
										MaxPrestigeBoolean = true;
										break;

									case "DBD_Camper8_Stat2":
										Vaults = formattedValue;
										VaultsBoolean = true;
										break;

									case "DBD_DLC3_Camper_Stat1":
										HexsCleansed = formattedValue;
										HexsCleansedBoolean = true;
										break;

									case "DBD_EscapeThroughHatch":
										EscapesHatch = formattedValue;
										EscapesHatchBoolean = true;
										break;
								}

							}
						
						ArrayList<Boolean> boolList = new ArrayList<>();
						boolList.add(GensBoolean);
						boolList.add(HealingCompletedBoolean);
						boolList.add(EscapesBoolean);
						boolList.add(SuccessfulSkillChecksBoolean);
						boolList.add(BloodPointsBoolean);
						boolList.add(MaxPrestigeBoolean);
						boolList.add(VaultsBoolean);
						boolList.add(HexsCleansedBoolean);
						boolList.add(EscapesHatchBoolean);

						String[] stringArray = { GensCompleted, HealingCompleted, Escapes, SuccessfulSkillChecks,
								BloodPoints, MaxPrestige, Vaults, HexsCleansed, EscapesHatch };

						formatNumbers(boolList, stringArray);

						EmbedCreateSpec embed = EmbedCreateSpec.builder()
								.color(Color.BLUE)
								.title("Survivor Stats")
								.url("https://deadbystats.eu/p/" + steamId)
								.addField("Gens Repaired", stringArray[0], true)
								.addField("Survivors Healed", stringArray[1], true)
								.addField("Total Escapes", stringArray[2], true)
								.addField("SkillChecks Hit", stringArray[3], true)
								.addField("Total Bloodpoints", stringArray[4], true)
								.addField("Highest Prestige", stringArray[5], true)
								.addField("Vaults in Chase", stringArray[6], true)
								.addField("Hex's Cleansed", stringArray[7], true)
								.addField("Escapes (Hatch)", stringArray[8], true)
								.build();
					
						channel.createMessage(embed).block();
						
						}
					}

				

				catch (IOException e) 
				{
					System.err.println("Error making HTTP request: " + e.getMessage());
				}
	}


	private static void survivorStats(Message message)
	{	
		        boolean steamVanityURL = false;
				String steamId = message.getContent().substring(39);
				steamId = steamId.replace("/", "");
				System.out.println(steamId);
				MessageChannel channel = message.getChannel().block();
				if(!steamStatus.vanityURL(steamId) && !steamVanityURL)	
				{
					channel.createMessage("Steam API seems to be down, it should be back up within a few minutes").block();
						return;
				}
				else
				{				
				OkHttpClient Ok = new OkHttpClient();

				String steamurl = "https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=" + STEAM_API_KEY
						+ "&vanityurl=" + steamId;

				// Replace the "STEAM_ID" and "APP_ID" placeholders with the actual values

				Request request2 = new Request.Builder()
						.url(steamurl)
						.build();
				// Print out the url
				System.out.println(request2.url());

				try 
				{
					Response response2 = Ok.newCall(request2).execute();
					String json2 = response2.body().string();

					Gson gson = new Gson();

					JsonObject jsonObject2 = gson.fromJson(json2, JsonObject.class);

					JsonObject steamID = jsonObject2.get("response").getAsJsonObject();

					String success = steamID.get("success").getAsString();

					if(success.equals("42"))
					{
						channel.createMessage("Please make sure your steam URL is correct!").block();
						return;
					}
					else 
					{									

					String URLSteamID = steamID.get("steamid").getAsString();

						String url = "https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/" +
								"?appid=" + appId +
								"&key=" + STEAM_API_KEY +
								"&steamid=" + URLSteamID;

						Request request = new Request.Builder()
								.url(url)
								.build();

						Response response = Ok.newCall(request).execute();
						String json = response.body().string();

						JsonObject jsonObject = gson.fromJson(json, JsonObject.class);
						System.out.println(jsonObject);
						boolean isOnlyEmptyObject = jsonObject.toString().equals("{}");
						System.out.println(isOnlyEmptyObject);

						if (isOnlyEmptyObject) 
						{
							channel.createMessage(
									"Please make sure your steam profile is public and allow for up to 10 minutes to try again")
									.block();
									
						} 
						else 
						{
							
							JsonArray achievementsArray = jsonObject.get("playerstats").getAsJsonObject().get("stats").getAsJsonArray();
							for (JsonElement element : achievementsArray) 
							{
								if (element == null) 
								{
									// Handle null elements
									continue;
								}

								JsonObject achievementObject = element.getAsJsonObject();
								JsonElement nameElement = achievementObject.get("name");
								JsonElement valueElement = achievementObject.get("value");

								if (nameElement == null || valueElement == null) {
									// Handle missing properties
									continue;
								}

								String name = nameElement.getAsString();
								double value = valueElement.getAsDouble();
								DecimalFormat decimalFormat = new DecimalFormat("#.##");
								decimalFormat.setRoundingMode(RoundingMode.DOWN);
								String formattedValue = decimalFormat.format(value);

								switch (name) 
								{
									case "DBD_GeneratorPct_float":
										GensCompleted = formattedValue;
										GensBoolean = true;
										break;

									case "DBD_HealPct_float":
										HealingCompleted = formattedValue;
										HealingCompletedBoolean = true;
										break;

									case "DBD_Escape":
										Escapes = formattedValue;
										EscapesBoolean = true;
										break;

									case "DBD_SkillCheckSuccess":
										SuccessfulSkillChecks = formattedValue;
										SuccessfulSkillChecksBoolean = true;
										break;

									case "DBD_BloodwebPoints":
										BloodPoints = formattedValue;
										BloodPointsBoolean = true;
										break;

									case "DBD_BloodwebMaxPrestigeLevel":
										MaxPrestige = formattedValue;
										MaxPrestigeBoolean = true;
										break;

									case "DBD_Camper8_Stat2":
										Vaults = formattedValue;
										VaultsBoolean = true;
										break;

									case "DBD_DLC3_Camper_Stat1":
										HexsCleansed = formattedValue;
										HexsCleansedBoolean = true;
										break;

									case "DBD_EscapeThroughHatch":
										EscapesHatch = formattedValue;
										EscapesHatchBoolean = true;
										break;
								}

							}
						
						ArrayList<Boolean> boolList = new ArrayList<>();
						boolList.add(GensBoolean);
						boolList.add(HealingCompletedBoolean);
						boolList.add(EscapesBoolean);
						boolList.add(SuccessfulSkillChecksBoolean);
						boolList.add(BloodPointsBoolean);
						boolList.add(MaxPrestigeBoolean);
						boolList.add(VaultsBoolean);
						boolList.add(HexsCleansedBoolean);
						boolList.add(EscapesHatchBoolean);

						String[] stringArray = { GensCompleted, HealingCompleted, Escapes, SuccessfulSkillChecks,
								BloodPoints, MaxPrestige, Vaults, HexsCleansed, EscapesHatch };

						formatNumbers(boolList, stringArray);

						SelectMenu select = SelectMenu.of("custom-id",
							SelectMenu.Option.of("label", "value"),
							SelectMenu.Option.of("label2", "value2"),
							SelectMenu.Option.of("label3", "value2")
						);

						EmbedCreateSpec embed = EmbedCreateSpec.builder()
								.color(Color.BLUE)
								.title("Survivor Stats")
								.url("https://deadbystats.eu/p/" + URLSteamID)
								.addField("Gens Repaired", stringArray[0], true)
								.addField("Survivors Healed", stringArray[1], true)
								.addField("Total Escapes", stringArray[2], true)
								.addField("SkillChecks Hit", stringArray[3], true)
								.addField("Total Bloodpoints", stringArray[4], true)
								.addField("Highest Prestige", stringArray[5], true)
								.addField("Vaults in Chase", stringArray[6], true)
								.addField("Hex's Cleansed", stringArray[7], true)
								.addField("Escapes (Hatch)", stringArray[8], true)
								.build();
					
						channel.createMessage(embed).block();
						}
					}
				}
				catch (IOException e) 
				{
					System.err.println("Error making HTTP request: " + e.getMessage());
				}
			}				
	}

    private static void formatNumbers(ArrayList<Boolean> boolList, String[] stringArray)
	{
		for (int i = 0; i < boolList.size(); i++) 
		{
			if (!boolList.get(i)) 
			{ // if the value is false
				stringArray[i] = "0";// set the corresponding string to "0"
			}
		}

		DecimalFormat formatter = new DecimalFormat("#,###.##");

		for (int i = 0; i < stringArray.length; i++) 
		{
			double DoubleValue = Double.parseDouble(stringArray[i]);
			String formattedValue = formatter.format(DoubleValue);
			stringArray[i] = formattedValue;
			System.out.println(formattedValue);
			System.out.println("------------------------------");
		}
	}

	private static void killerStats(Message message) 
	{
				String steamId = message.getContent().substring(37);
				steamId = steamId.replace("/", "");
				System.out.println(steamId);
				MessageChannel channel = message.getChannel().block();

				OkHttpClient Ok = new OkHttpClient();

				String steamurl = "https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=" + STEAM_API_KEY
						+ "&vanityurl=" + steamId;

				Request request2 = new Request.Builder()
						.url(steamurl)
						.build();

				try {

					Response response2 = Ok.newCall(request2).execute();
					String json2 = response2.body().string();

					Gson gson = new Gson();				
					JsonObject jsonObject2 = gson.fromJson(json2, JsonObject.class);

					JsonObject steamID = jsonObject2.get("response").getAsJsonObject();

					String URLSteamID = steamID.get("steamid").getAsString();

					String url = "https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/" +
							"?appid=" + appId +
							"&key=" + STEAM_API_KEY +
							"&steamid=" + URLSteamID;

					Request request = new Request.Builder()
							.url(url)
							.build();

					Response response = Ok.newCall(request).execute();
					String json = response.body().string();

					JsonObject jsonObject = gson.fromJson(json, JsonObject.class);
					System.out.println(jsonObject);
					boolean isOnlyEmptyObject = jsonObject.toString().equals("{}");
					System.out.println(isOnlyEmptyObject);

					if (isOnlyEmptyObject) 
					{
						channel.createMessage(
								"Please make sure your steam profile is public, you can do so by going to your profile, clicking on 'Edit Profile' and going under privacy settings and making 'Game details' public, allow for up to 10 minutes to try again")
								.block();
					} 
					else 
					{
						JsonArray achievementsArray = jsonObject.get("playerstats").getAsJsonObject().get("stats")
								.getAsJsonArray();
						for (JsonElement element : achievementsArray) {
							JsonObject achievementObject = element.getAsJsonObject();
							String name = achievementObject.get("name").getAsString();
							double value = achievementObject.get("value").getAsDouble();
							DecimalFormat decimalFormat = new DecimalFormat("#.##");
							decimalFormat.setRoundingMode(RoundingMode.DOWN);
							String formattedValue = decimalFormat.format(value);

							switch (name) 
							{
								case "DBD_KilledCampers":								
									SurvivorsKilled = formattedValue;
									SurvivorsKilledBoolean = true;
									break;

								case "DBD_SacrificedCampers":
									SurvivorsSacrificed = formattedValue;
									SurvivorsSacrificedBoolean = true;
									break;

								case "DBD_BloodwebPoints":
									BloodPoints = formattedValue;
									BloodPointsBoolean = true;
									break;

								case "DBD_DLC7_Slasher_Stat2":
									ObsessionsSacrificed = formattedValue;
									ObsessionsSacrificedBoolean = true;
									break;

								case "DBD_Chapter13_Slasher_Stat1":
									HatchesClosed = formattedValue;
									HatchesClosedBoolean = true;
									break;

								case "DBD_BloodwebMaxPrestigeLevel":
									MaxPrestige = formattedValue;
									MaxPrestigeBoolean = true;
									break;
								
							}
						}

						String[] stringArray = { SurvivorsKilled, SurvivorsSacrificed, BloodPoints, ObsessionsSacrificed,  HatchesClosed, MaxPrestige};

						ArrayList<Boolean> boolList = new ArrayList<>();
						boolList.add(SurvivorsKilledBoolean);
						boolList.add(SurvivorsSacrificedBoolean);
						boolList.add(BloodPointsBoolean);
						boolList.add(ObsessionsSacrificedBoolean);
						boolList.add(HatchesClosedBoolean);
						boolList.add(MaxPrestigeBoolean);

						formatNumbers(boolList, stringArray);


						EmbedCreateSpec embed = EmbedCreateSpec.builder()
								.color(Color.BLUE)
								.title("Killer Stats")
								.url("https://deadbystats.eu/p/" + URLSteamID)
								.addField("field title", "value", false)
								.addField("\u200B", "\u200B", false)
								.addField("Surivors Killed (Mori)", stringArray[0], true)
								.addField("Survivors Sacrificed", stringArray[1], true)
								.addField("Bloodpoints Earned", stringArray[2], true)
								.addField("Obsessions Sacrifieced", stringArray[3], true)
								.addField("Hatches Closed", stringArray[4], true)
								.addField("Highest Prestige", stringArray[5], true)								
								.build();

						channel.createMessage(embed).block();
					}

				} catch (IOException e) 
				{
					System.err.println("Error making HTTP request: " + e.getMessage());
				}
	}	

	private static void help(Message message)
	{

		MessageChannel channel = message.getChannel().block();

		EmbedCreateSpec embed = EmbedCreateSpec.builder()
			.color(Color.BLUE)
			.title("Help")								
				.description("Commands to use on the bot")						
					.addField("!survivor (steamurl): Survivor Stats", "" , false)
					.addField("!killer (steamurl): Killer Stats", "" , false)
					.addField("!help: Frequently Asked Questions", "" , false)
					.addField("!faq: Frequently Asked Questions", "" , false)
					.addField("!broken: Bot is broken", "", false)
					.addField("!platforms: Stats on other platforms", "", false)															
							.build();
		
		channel.createMessage(embed).block();
	}

	private static void faq(Message message)
	{
		MessageChannel channel = message.getChannel().block();

		EmbedCreateSpec embed = EmbedCreateSpec.builder()
			.color(Color.BLUE)
			.title("Help")								
				.description("Commands to use on the bot")						
					.thumbnail("https://i.imgur.com/F9BhEoz.png")
					.addField("Q: I am on Xbox/PS/Epic how do I get my stats?", "A: Unfortunately not, type !platforms for a more in-depth explanation." , false)
					.addField("Q: How can I contact the bot owner?", "A: My discord is: 'Extra Virgin#7155'" , false)
					.addField("Q: Can you implement a feature?", "A: There is a possibility, this is also a passion project so other things in my life take priority" , false)
					.addField("Q: Can I add you on steam?", "A: Sure, but please do not spam me. (https://steamcommunity.com/id/Extra_Virgin/)" , false)
					.addField("Q: How often are stats updated?", "A: Stats are updated usually after you close the game, it can take a few minutes for it to update" , false)															
							.build();
		
		channel.createMessage(embed).block();
	}

	private static void platforms(Message message)
	{
		MessageChannel channel = message.getChannel().block();

		channel.createMessage("Unfortunately the only way for anybody to get their stats online is via the steam API which will only contain the stats for steam users. If BHVR ever decide to make a API that you can see stats for other platforms, I will definitely implement it.").block();
	}
}
